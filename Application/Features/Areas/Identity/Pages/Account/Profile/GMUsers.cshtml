@page
@model Meal_Planning.Application.Features.Areas.Identity.Pages.Account.Profile.GMUsersModel
@{
    ViewData["Title"] = "All Users";
}

<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
<script src="https://unpkg.com/lucide@latest/dist/umd/lucide.min.js"></script>

<div class="max-w-6xl mx-auto py-8 px-4">
    <div class="flex items-center justify-between mb-6">
        <h1 class="text-2xl font-bold text-[var(--gold-dark)] flex items-center gap-2">
            <i data-lucide="users" class="text-[var(--gold)]"></i>
            All Users
        </h1>
        <div>
            <input id="userSearch" type="text" placeholder="Search users..." class="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-[var(--gold)]" />
        </div>
    </div>
    <div class="bg-white rounded-xl shadow p-4 overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Email</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                </tr>
            </thead>
            <tbody id="userTableBody" class="bg-white divide-y divide-gray-100">
                @foreach (var user in Model.Users)
                {
                    var isLocked = user.LockoutEnd != null && user.LockoutEnd > DateTimeOffset.Now;
                    <tr>
                        <td class="px-4 py-2 whitespace-nowrap">@user.FirstName @user.LastName</td>
                        <td class="px-4 py-2 whitespace-nowrap flex items-center gap-2">
                            <span>@user.Email</span>
                            <button type="button" class="copy-email-btn text-gray-400 hover:text-[var(--gold-dark)]" data-email="@user.Email" title="Copy Email">
                                <i data-lucide="copy"></i>
                            </button>
                        </td>
                        <td class="px-4 py-2 whitespace-nowrap">
                            <span class="inline-block px-3 py-1 rounded-full text-xs font-semibold @(isLocked ? "bg-red-100 text-red-700" : "bg-green-100 text-green-700")">
                                @(isLocked ? "Locked" : "Active")
                            </span>
                        </td>
                        <td class="px-4 py-2 whitespace-nowrap">
                            <!-- Placeholder for future actions (edit, delete, etc.) -->
                            <button class="text-gray-500 hover:text-[var(--gold-dark)]" title="View Details" disabled>
                                <i data-lucide="eye"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (!Model.Users.Any())
        {
            <div class="text-center text-gray-500 py-8">No users found.</div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (window.lucide) lucide.createIcons();

            // Search/filter logic
            const searchInput = document.getElementById('userSearch');
            const tableBody = document.getElementById('userTableBody');
            searchInput?.addEventListener('input', function () {
                const filter = this.value.toLowerCase();
                Array.from(tableBody.rows).forEach(row => {
                    const name = row.cells[0].innerText.toLowerCase();
                    const email = row.cells[1].innerText.toLowerCase();
                    row.style.display = (name.includes(filter) || email.includes(filter)) ? '' : 'none';
                });
            });

            // Copy email logic
            document.querySelectorAll('.copy-email-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const email = this.getAttribute('data-email');
                    navigator.clipboard.writeText(email);
                    this.classList.add('text-green-600');
                    setTimeout(() => this.classList.remove('text-green-600'), 1000);
                });
            });
        });
    </script>
}