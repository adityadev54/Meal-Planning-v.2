@page
@model ManageRolesModel

@{
    ViewData["Title"] = "AI & User Management";
}

<link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Lora:wght@400;500;600&family=Inter:wght@300;400;600;700&display=swap" rel="stylesheet" />
<!-- Load jQuery before validation scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
<script src="https://unpkg.com/lucide@latest"></script>
<script src="https://cdn.tailwindcss.com"></script>

<script>
    tailwind.config = {
        theme: {
            extend: {
                fontFamily: {
                    'inter': ['Inter', 'sans-serif'],
                    'playfair': ['Playfair Display', 'serif'],
                    'lora': ['Lora', 'serif']
                },
                colors: {
                    brand: {
                        50: '#f8f3e3',
                        100: '#f0e8c9', 
                        200: '#e5c867',
                        300: '#d4ae38',
                        400: '#c9a227',
                        500: '#c9a227',
                        600: '#b48e22',
                        700: '#9e7b1e',
                        800: '#856519',
                        900: '#6a5014',
                    },
                    success: '#4CAF50',
                    warning: '#FFC107',
                    error: '#ef4444',
                    dark: {
                        1: '#121212',
                        2: '#1E1E1E',
                        3: '#2A2A2A'
                    },
                    light: {
                        1: '#FFFFFF',
                        2: '#F8F8F8',
                        3: '#EEEEEE'
                    }
                },
                keyframes: {
                    slideUp: {
                        '0%': { transform: 'translateY(20px)', opacity: '0' },
                        '100%': { transform: 'translateY(0)', opacity: '1' }
                    },
                    fadeIn: {
                        '0%': { opacity: '0' },
                        '100%': { opacity: '1' }
                    },
                    pulse: {
                        '0%, 100%': { opacity: '1' },
                        '50%': { opacity: '0.7' }
                    },
                    shimmer: {
                        '0%': { backgroundPosition: '-500px 0' },
                        '100%': { backgroundPosition: '500px 0' }
                    }
                },
                animation: {
                    'slide-up': 'slideUp 0.5s ease-out forwards',
                    'fade-in': 'fadeIn 0.5s ease-out forwards',
                    'pulse': 'pulse 2s infinite',
                    'shimmer': 'shimmer 2s infinite linear'
                },
                backgroundImage: {
                    'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
                    'grain': "url(\"data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%' height='100%' filter='url(%23noiseFilter)' opacity='0.1'/%3E%3C/svg%3E\")"
                }
            }
        }
    }
</script>

<div class="min-h-screen bg-gradient-to-b from-light-1 to-brand-50 bg-grain pt-6 pb-12 opacity-0 animate-slide-up">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="relative z-10">
            <!-- Logo and Title Section -->
            <div class="flex flex-col items-center mb-10">
                <img src="~/assets/getmoving1000.png" alt="GetMoving Logo" class="h-16 w-auto mb-4" />
                <div class="relative">
                    <h1 class="text-3xl font-bold font-playfair text-center bg-gradient-to-r from-brand-600 to-brand-500 bg-clip-text text-transparent">
                        Admin Dashboard
                    </h1>
                    <div class="h-1 w-24 bg-gradient-to-r from-brand-500 to-brand-400 rounded-full mx-auto mt-2"></div>
                </div>
                <p class="text-dark-2 text-center mt-3 max-w-2xl font-lora">
                    Manage users, roles and AI settings for your GetMoving application
                </p>
            </div>
            
            <!-- Status Messages -->
            @if (TempData["StatusMessage"] != null)
            {
                <div class="flex items-center p-4 mb-6 rounded-lg bg-gradient-to-r from-green-50 to-brand-50 border-l-4 border-success shadow-sm opacity-0 animate-fade-in" role="alert" aria-live="polite">
                    <div class="mr-3 flex-shrink-0 p-1.5 bg-success bg-opacity-10 rounded-full">
                        <i data-lucide="check-circle" class="h-5 w-5 text-success"></i>
                    </div>
                    <div class="font-medium text-success flex-grow">@TempData["StatusMessage"]</div>
                    <button type="button" class="ml-auto -mx-1.5 -my-1.5 text-success rounded-lg p-1.5 inline-flex h-8 w-8 hover:bg-success hover:bg-opacity-10 focus:outline-none" onclick="this.parentElement.remove()">
                        <span class="sr-only">Dismiss</span>
                        <i data-lucide="x" class="h-5 w-5"></i>
                    </button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="flex items-center p-4 mb-6 rounded-lg bg-gradient-to-r from-red-50 to-brand-50 border-l-4 border-error shadow-sm opacity-0 animate-fade-in" role="alert" aria-live="polite">
                    <div class="mr-3 flex-shrink-0 p-1.5 bg-error bg-opacity-10 rounded-full">
                        <i data-lucide="alert-circle" class="h-5 w-5 text-error"></i>
                    </div>
                    <div class="font-medium text-error flex-grow">@TempData["ErrorMessage"]</div>
                    <button type="button" class="ml-auto -mx-1.5 -my-1.5 text-error rounded-lg p-1.5 inline-flex h-8 w-8 hover:bg-error hover:bg-opacity-10 focus:outline-none" onclick="this.parentElement.remove()">
                        <span class="sr-only">Dismiss</span>
                        <i data-lucide="x" class="h-5 w-5"></i>
                    </button>
                </div>
            }

            <!-- Admin header with badge -->
            <div class="mb-8 relative">
                <div class="absolute -left-2 -top-2">
                    <span class="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium bg-gradient-to-r from-[#c9a227] to-[#b48e22] text-white shadow-lg transform -rotate-2">
                        <i data-lucide="shield" class="h-3 w-3 mr-1"></i>
                        ADMIN AREA
                    </span>
                </div>
                <div class="flex justify-between items-center p-4 rounded-xl bg-white border border-brand-200 shadow-sm">
                    <h2 class="text-xl font-bold font-playfair flex items-center gap-3 text-dark-1">
                        <i data-lucide="shield" class="text-brand-500"></i>
                        AI & User Management
                    </h2>
                    <span class="text-xs text-gray-500">@DateTime.Now.ToString("MMMM d, yyyy")</span>
                </div>
            </div>

    <!-- Modern Tab Navigation -->
    <nav class="mb-8 bg-white rounded-xl shadow-sm border border-brand-100 p-2 flex flex-wrap md:flex-nowrap overflow-hidden">
        <div class="grid grid-cols-1 sm:grid-cols-@(User.IsInRole("Admin") ? "3" : "2") gap-2 w-full">
            <button class="group relative py-3 px-3 rounded-lg font-medium font-lora text-dark-2 cursor-pointer transition-all duration-300 flex flex-col items-center justify-center @(!User.IsInRole("Admin") ? "bg-gradient-to-br from-brand-100 to-brand-50 text-dark-1 font-semibold shadow-inner" : "hover:bg-brand-50")"
                    data-panel="panel-roles" 
                    aria-controls="panel-roles" 
                    aria-selected="@(!User.IsInRole("Admin") ? "true" : "false")">
                <div class="flex items-center justify-center w-12 h-12 mb-2 rounded-full @(!User.IsInRole("Admin") ? "bg-gradient-to-br from-[#c9a227] to-[#b48e22]" : "bg-brand-100") text-@(!User.IsInRole("Admin") ? "white" : "brand-600") group-hover:shadow-md transition-all duration-300">
                    <i data-lucide="users" class="h-6 w-6"></i>
                </div>
                <span class="text-center">User Roles</span>
                <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-1 rounded-t-full bg-brand-500 @(!User.IsInRole("Admin") ? "opacity-100" : "opacity-0") group-hover:opacity-50 transition-all duration-300"></div>
            </button>

            <button class="group relative py-3 px-3 rounded-lg font-medium font-lora text-dark-2 cursor-pointer transition-all duration-300 flex flex-col items-center justify-center hover:bg-brand-50"
                    data-panel="panel-users" 
                    aria-controls="panel-users" 
                    aria-selected="false">
                <div class="flex items-center justify-center w-12 h-12 mb-2 rounded-full bg-brand-100 text-brand-600 group-hover:shadow-md transition-all duration-300">
                    <i data-lucide="user-cog" class="h-6 w-6"></i>
                </div>
                <span class="text-center">User Management</span>
                <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-1 rounded-t-full bg-brand-500 opacity-0 group-hover:opacity-50 transition-all duration-300"></div>
            </button>

            @if (User.IsInRole("Admin"))
            {
                <button class="group relative py-3 px-3 rounded-lg font-medium font-lora text-dark-2 cursor-pointer transition-all duration-300 flex flex-col items-center justify-center hover:bg-brand-50"
                        data-panel="panel-ai" 
                        aria-controls="panel-ai" 
                        aria-selected="false">
                    <div class="flex items-center justify-center w-12 h-12 mb-2 rounded-full bg-brand-100 text-brand-600 group-hover:shadow-md transition-all duration-300">
                        <i data-lucide="sparkles" class="h-6 w-6"></i>
                    </div>
                    <span class="text-center">AI Service Info</span>
                    <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-12 h-1 rounded-t-full bg-brand-500 opacity-0 group-hover:opacity-50 transition-all duration-300"></div>
                </button>
            }
        </div>
    </nav>

    @if (User.IsInRole("Admin"))
    {
        <!-- AI Info Panel with modern design -->
        <div id="panel-ai" class="bg-white rounded-xl shadow-lg p-8 mb-8 border border-brand-200 opacity-0 animate-slide-up" aria-labelledby="tab-ai" style="display: none;">
            <div class="flex justify-between items-center mb-8">
                <div class="flex items-center gap-3">
                    <div class="flex items-center justify-center w-12 h-12 rounded-xl bg-gradient-to-br from-[#c9a227] to-[#b48e22] text-white shadow-md">
                        <i data-lucide="sparkles" class="h-6 w-6"></i>
                    </div>
                    <h2 class="text-2xl font-bold font-playfair text-dark-1">AI Service Information</h2>
                </div>
                <span class="px-3 py-1 rounded-full bg-success bg-opacity-10 text-success text-sm font-medium inline-flex items-center gap-2 border border-success border-opacity-20">
                    <span class="h-2 w-2 rounded-full bg-success animate-pulse"></span>
                    Active
                </span>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div class="p-6 rounded-lg border border-brand-100 bg-gradient-to-br from-white to-brand-50">
                    <h3 class="text-lg font-semibold text-dark-2 mb-3 flex items-center gap-2">
                        <i data-lucide="activity" class="h-5 w-5 text-brand-500"></i>
                        System Status
                    </h3>
                    <div class="space-y-3 text-dark-3">
                        <div class="flex justify-between items-center border-b border-brand-100 pb-2">
                            <span>API Connection</span>
                            <span class="text-success font-medium">Online</span>
                        </div>
                        <div class="flex justify-between items-center border-b border-brand-100 pb-2">
                            <span>Response Time</span>
                            <span class="font-medium">300ms</span>
                        </div>
                        <div class="flex justify-between items-center border-b border-brand-100 pb-2">
                            <span>Last Checked</span>
                            <span class="font-medium">@DateTime.Now.AddMinutes(-3).ToString("h:mm tt")</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span>Service Mode</span>
                            <span class="px-2 py-1 rounded-md bg-brand-100 text-brand-700 text-xs font-bold">PRODUCTION</span>
                        </div>
                    </div>
                </div>
                
                <div class="p-6 rounded-lg border border-brand-100 bg-gradient-to-br from-white to-brand-50">
                    <h3 class="text-lg font-semibold text-dark-2 mb-3 flex items-center gap-2">
                        <i data-lucide="info" class="h-5 w-5 text-brand-500"></i>
                        About the AI Service
                    </h3>
                    <p class="text-dark-3 mb-4">
                        This application uses an AI service for enhanced features. For security reasons, technical details about the AI provider are not shown.
                    </p>
                    <div class="bg-brand-100 bg-opacity-50 p-3 rounded-md border-l-4 border-brand-500">
                        <p class="text-sm text-dark-2">
                            <strong>Important:</strong> If you encounter any AI-related bugs or issues, please contact the developer directly at <span class="text-brand-600 font-medium">getmoving1000@gmail.com</span>
                        </p>
                    </div>
                </div>
            </div>
            
            <div class="flex justify-end mt-6">
                <button type="button" id="test-connection" class="inline-flex items-center py-2 px-4 rounded-lg font-medium text-sm bg-white text-brand-600 border border-brand-200 hover:border-brand-500 transition-all duration-200">
                    <i data-lucide="wifi" class="h-4 w-4 mr-2"></i> 
                    Test Connection
                </button>
            </div>
            
            <!-- Connection test results panel (hidden by default) -->
            <div id="connection-result" class="mt-4 p-4 rounded-lg border border-brand-100 bg-light-2" style="display: none;">
                <h4 class="text-sm font-bold mb-2">Connection Test Results:</h4>
                <div id="test-result-content"></div>
            </div>
        </div>
    }

    <!-- User Roles Panel with modern design -->
    <div id="panel-roles" class="bg-white rounded-xl shadow-lg p-8 mb-8 border border-brand-200 opacity-0 animate-slide-up" style="@(User.IsInRole("Admin") ? "display: none;" : "")" aria-labelledby="tab-roles">
        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-8">                <div class="flex items-center gap-3">
                    <div class="flex items-center justify-center w-12 h-12 rounded-xl bg-gradient-to-br from-[#c9a227] to-[#b48e22] text-white shadow-md">
                        <i data-lucide="users" class="h-6 w-6"></i>
                    </div>
                    <h2 class="text-2xl font-bold font-playfair text-dark-1">User Roles Overview</h2>
                </div>
            <div class="inline-flex items-center gap-2 px-3 py-1.5 bg-light-2 rounded-lg border border-brand-100">
                <i data-lucide="users" class="h-4 w-4 text-brand-500"></i>
                <span class="text-sm font-medium">@Model.Users.Count() active users</span>
            </div>
        </div>

        <div class="mb-6">
            <div class="bg-brand-50 bg-opacity-30 rounded-lg p-4 mb-6">
                <div class="flex items-center gap-3 mb-2">
                    <div class="flex items-center justify-center w-8 h-8 rounded-full bg-brand-100">
                        <i data-lucide="info" class="h-4 w-4 text-brand-600"></i>
                    </div>
                    <h3 class="text-lg font-semibold text-dark-2">Role Assignment Overview</h3>
                </div>
                <p class="text-dark-3">This table shows all users and their assigned roles in the system. A user's status indicates whether they can currently log in to the application.</p>
            </div>
            
            <div class="overflow-x-auto rounded-xl border border-brand-100 shadow-sm">
                <table class="table-auto w-full text-left">
                    <thead>
                        <tr class="bg-gradient-to-r from-brand-50 to-brand-100 text-dark-2">
                            <th class="px-6 py-4 text-sm font-bold rounded-tl-lg">User Details</th>
                            <th class="px-6 py-4 text-sm font-bold">Assigned Roles</th>
                            <th class="px-6 py-4 text-sm font-bold text-center rounded-tr-lg">Account Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model.Users)
                        {
                            var roles = Model.UserRoles.ContainsKey(user.Id) ? Model.UserRoles[user.Id] : new List<string>();
                            var isLocked = user.LockoutEnd != null && user.LockoutEnd > DateTimeOffset.Now;
                            var hasAdminRole = roles.Contains("Admin");
                            
                            <tr class="border-b border-brand-100 hover:bg-light-1 transition-colors duration-150">
                                <td class="px-6 py-4">
                                    <div class="flex items-center gap-3">
                                        <div class="flex-shrink-0 h-10 w-10 rounded-full bg-brand-100 flex items-center justify-center border border-brand-200">
                                            <span class="text-brand-700 font-bold">@(user.FirstName?.Substring(0, 1)?.ToUpper() ?? "U")</span>
                                        </div>
                                        <div>
                                            <div class="font-medium text-dark-1">@user.FirstName @user.LastName</div>
                                            <div class="text-sm text-dark-3">@user.Email</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="flex flex-wrap gap-2">
                                        @if (roles.Any())
                                        {
                                            foreach (var role in roles)
                                            {
                                                var isAdmin = role == "Admin";
                                                <span class="px-2.5 py-1 rounded-md text-xs font-medium @(isAdmin ? "bg-brand-100 text-brand-700" : "bg-light-2 text-dark-2")">
                                                    @role
                                                </span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="px-2.5 py-1 rounded-md bg-red-50 text-red-600 text-xs font-medium">No Roles</span>
                                        }
                                    </div>
                                </td>
                                <td class="px-6 py-4 text-center">
                                    <div class="inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full @(isLocked ? "bg-red-100 text-red-700" : "bg-green-100 text-green-700") text-sm font-medium">
                                        <span class="h-2 w-2 rounded-full @(isLocked ? "bg-red-500" : "bg-green-500") @(isLocked ? "" : "animate-pulse")"></span>
                                        @(isLocked ? "Locked" : "Active")
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            @if (!Model.Users.Any())
            {
                <div class="text-center p-8 bg-light-1 rounded-xl border border-brand-100">
                    <div class="flex flex-col items-center justify-center gap-3">
                        <div class="w-16 h-16 flex items-center justify-center rounded-full bg-brand-100">
                            <i data-lucide="user-x" class="h-8 w-8 text-brand-500"></i>
                        </div>
                        <h3 class="text-lg font-semibold text-dark-2">No Users Found</h3>
                        <p class="text-dark-3 max-w-md">There are currently no users registered in the system.</p>
                    </div>
                </div>
            }
        </div>
        
        <div class="p-4 bg-light-1 rounded-lg border border-brand-100">
            <div class="flex items-start gap-3">
                <div class="text-brand-500 mt-0.5">
                    <i data-lucide="shield" class="h-5 w-5"></i>
                </div>
                <div>
                    <h4 class="text-sm font-semibold text-dark-1 mb-1">About User Roles</h4>
                    <p class="text-xs text-dark-3">
                        Each user can have multiple roles that determine their permissions within the application. 
                        Use the "User Management" tab to assign or remove roles from users.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- User Management Panel with modern design -->
    <div id="panel-users" class="bg-white rounded-xl shadow-lg p-8 mb-8 border border-brand-200 opacity-0 animate-slide-up" style="display: none;" aria-labelledby="tab-users">
        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-8">                <div class="flex items-center gap-3">
                    <div class="flex items-center justify-center w-12 h-12 rounded-xl bg-gradient-to-br from-[#c9a227] to-[#b48e22] text-white shadow-md">
                        <i data-lucide="user-cog" class="h-6 w-6"></i>
                    </div>
                    <h2 class="text-2xl font-bold font-playfair text-dark-1">User Management</h2>
                </div>
            <div class="inline-flex items-center gap-2 px-3 py-1.5 bg-light-2 rounded-lg border border-brand-100">
                <i data-lucide="shield" class="h-4 w-4 text-brand-500"></i>
                <span class="text-sm font-medium">@Model.Roles.Count() available roles</span>
            </div>
        </div>

        <form method="post" id="roleForm">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
                <div class="lg:col-span-2 bg-gradient-to-br from-white to-light-2 p-6 rounded-xl border border-brand-100 shadow-sm">
                    <div class="flex items-center gap-3 mb-4">
                        <div class="flex items-center justify-center w-10 h-10 rounded-full bg-brand-100">
                            <i data-lucide="users" class="h-5 w-5 text-brand-600"></i>
                        </div>
                        <h3 class="text-xl font-semibold text-dark-2">User Selection</h3>
                    </div>
                
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block mb-2 font-medium font-lora text-dark-2" asp-for="SelectedUserId">
                                <div class="flex items-center gap-2 mb-1">
                                    <i data-lucide="user" class="h-4 w-4 text-brand-500"></i> 
                                    Select User
                                </div>
                            </label>
                            <div class="relative">
                                <select class="w-full py-3.5 px-4 border border-brand-200 rounded-lg bg-white text-base transition-all duration-200 focus:outline-none focus:border-brand-600 focus:ring-2 focus:ring-brand-600 focus:ring-opacity-10 appearance-none bg-[url('data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 24 24\' fill=\'none\' stroke=\'%23c9a227\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-linejoin=\'round\'%3e%3cpolyline points=\'6 9 12 15 18 9\'%3e%3c/polyline%3e%3c/svg%3e')] bg-no-repeat bg-[right_1rem_center] bg-[length:1em] shadow-sm" 
                                    asp-for="SelectedUserId" required aria-required="true">
                                    <option value="">Choose a user...</option>
                                    @foreach (var user in Model.Users)
                                    {
                                        <option value="@user.Id">@user.FirstName @user.LastName (@user.Email)</option>
                                    }
                                </select>
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span class="text-brand-400">
                                        <i data-lucide="user" class="h-5 w-5"></i>
                                    </span>
                                </div>
                            </div>
                            <span asp-validation-for="SelectedUserId" class="text-sm text-error mt-1 inline-block"></span>
                        </div>
                        
                        <div>
                            <label class="block mb-2 font-medium font-lora text-dark-2" asp-for="SelectedRole">
                                <div class="flex items-center gap-2 mb-1">
                                    <i data-lucide="shield" class="h-4 w-4 text-brand-500"></i> 
                                    Select Role
                                </div>
                            </label>
                            <div class="relative">
                                <select class="w-full py-3.5 px-4 border border-brand-200 rounded-lg bg-white text-base transition-all duration-200 focus:outline-none focus:border-brand-600 focus:ring-2 focus:ring-brand-600 focus:ring-opacity-10 appearance-none bg-[url('data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 24 24\' fill=\'none\' stroke=\'%23c9a227\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-linejoin=\'round\'%3e%3cpolyline points=\'6 9 12 15 18 9\'%3e%3c/polyline%3e%3c/svg%3e')] bg-no-repeat bg-[right_1rem_center] bg-[length:1em] shadow-sm" 
                                    asp-for="SelectedRole" required aria-required="true">
                                    <option value="">Choose a role...</option>
                                    @foreach (var role in Model.Roles)
                                    {
                                        <option value="@role">@role @(role == "Admin" || role == "User" ? "(System Role)" : "")</option>
                                    }
                                </select>
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span class="text-brand-400">
                                        <i data-lucide="shield" class="h-5 w-5"></i>
                                    </span>
                                </div>
                            </div>
                            <span asp-validation-for="SelectedRole" class="text-sm text-error mt-1 inline-block"></span>
                        </div>
                    </div>
                </div>
                
                <div class="bg-gradient-to-br from-white to-light-2 p-6 rounded-xl border border-brand-100 shadow-sm">
                    <div class="flex items-center gap-3 mb-4">
                        <div class="flex items-center justify-center w-10 h-10 rounded-full bg-brand-100">
                            <i data-lucide="info" class="h-5 w-5 text-brand-600"></i>
                        </div>
                        <h3 class="text-xl font-semibold text-dark-2">Quick Help</h3>
                    </div>
                    <ul class="space-y-3 text-dark-3 text-sm">
                        <li class="flex gap-2">
                            <div class="text-brand-500 flex-shrink-0">
                                <i data-lucide="check-circle" class="h-5 w-5"></i>
                            </div>
                            <span>Select both a user and role before performing actions</span>
                        </li>
                        <li class="flex gap-2">
                            <div class="text-brand-500 flex-shrink-0">
                                <i data-lucide="check-circle" class="h-5 w-5"></i>
                            </div>
                            <span>Password resets send an email to the user</span>
                        </li>
                        <li class="flex gap-2">
                            <div class="text-brand-500 flex-shrink-0">
                                <i data-lucide="check-circle" class="h-5 w-5"></i>
                            </div>
                            <span>Locked users cannot log in until unlocked</span>
                        </li>
                    </ul>
                </div>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                <div>
                    <h4 class="text-lg font-semibold text-dark-2 mb-3 flex items-center gap-2">
                        <i data-lucide="shield" class="h-5 w-5 text-brand-500"></i>
                        Role Management
                    </h4>
                    <div class="flex flex-wrap gap-3">
                        <button type="submit" asp-page-handler="AssignRole" class="inline-flex items-center py-2.5 px-4 rounded-lg font-medium text-sm text-white bg-gradient-to-r from-[#c9a227] to-[#b48e22] hover:from-[#b48e22] hover:to-[#9e7b1e] transition-all duration-200 shadow-sm hover:shadow transform hover:-translate-y-0.5">
                            <i data-lucide="user-plus" class="h-4 w-4 mr-1.5"></i> 
                            Assign Role
                        </button>
                        <button type="submit" asp-page-handler="RemoveRole" class="inline-flex items-center py-2.5 px-4 rounded-lg font-medium text-sm bg-white text-dark-2 border border-brand-200 hover:border-brand-500 transition-all duration-200 hover:bg-brand-50">
                            <i data-lucide="user-minus" class="h-4 w-4 mr-1.5"></i> 
                            Remove Role
                        </button>
                    </div>
                </div>
                
                <div>
                    <h4 class="text-lg font-semibold text-dark-2 mb-3 flex items-center gap-2">
                        <i data-lucide="settings" class="h-5 w-5 text-brand-500"></i>
                        User Account Actions
                    </h4>
                    <div class="flex flex-wrap gap-3">
                        <button type="button" onclick="showPasswordResetModal()" class="inline-flex items-center py-2.5 px-4 rounded-lg font-medium text-sm bg-[#e5c867] text-dark-1 hover:bg-[#c9a227] transition-all duration-200" title="Generate a temporary password that requires change on next login">
                            <i data-lucide="key-round" class="h-4 w-4 mr-1.5"></i> 
                            Generate Temporary Password
                        </button>
                        <button type="submit" asp-page-handler="LockUser" class="inline-flex items-center py-2.5 px-4 rounded-lg font-medium text-sm bg-white text-dark-2 border border-brand-200 hover:border-brand-500 transition-all duration-200 hover:bg-brand-50">
                            <i data-lucide="lock" class="h-4 w-4 mr-1.5"></i> 
                            Lock User
                        </button>
                        <button type="submit" asp-page-handler="UnlockUser" class="inline-flex items-center py-2.5 px-4 rounded-lg font-medium text-sm bg-white text-dark-2 border border-brand-200 hover:border-brand-500 transition-all duration-200 hover:bg-brand-50">
                            <i data-lucide="unlock" class="h-4 w-4 mr-1.5"></i> 
                            Unlock User
                        </button>
                        <button type="button" onclick="showDeleteModal()" class="inline-flex items-center py-2.5 px-4 rounded-lg font-medium text-sm bg-white text-red-600 border border-red-200 hover:border-red-500 hover:bg-red-50 transition-all duration-200">
                            <i data-lucide="trash-2" class="h-4 w-4 mr-1.5"></i> 
                            Delete User
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="p-4 bg-light-1 rounded-lg border border-brand-100 mt-6 flex items-start gap-3">
                <div class="text-brand-500 mt-0.5 flex-shrink-0">
                    <i data-lucide="key" class="h-5 w-5"></i>
                </div>
                <div>
                    <h4 class="text-sm font-semibold text-dark-1 mb-1">Temporary Password Security</h4>
                    <p class="text-xs text-dark-3">
                        When you generate a temporary password, the system will create a secure one-time password. This temporary password will be 
                        displayed to you and can be sent to the user's email address. The user will be required to change this password upon their next login.
                    </p>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Password Reset Modal -->
<div class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 opacity-0 pointer-events-none transition-opacity duration-300" id="password-reset-modal" role="dialog" aria-labelledby="password-modal-title" tabindex="-1">
    <div class="bg-white rounded-xl w-full max-w-md p-0 border border-brand-200 shadow-xl transform translate-y-5 transition-all duration-300 overflow-hidden">
        <!-- Modal Header -->
        <div class="bg-[#f8f3e3] p-6 border-b border-[#f0e8c9]">
            <div class="flex items-center gap-4">
                <div class="flex items-center justify-center w-12 h-12 rounded-full bg-[#f0e8c9] text-[#b48e22]">
                    <i data-lucide="key" class="h-6 w-6"></i>
                </div>
                <div>
                    <h3 class="text-xl font-bold font-playfair text-[#9e7b1e]" id="password-modal-title">
                        Password Reset
                    </h3>
                    <p class="text-sm text-[#b48e22] mt-1">Temporary password generated</p>
                </div>
            </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-6">
            <div class="mb-6">
                <div class="p-4 bg-light-2 rounded-lg mb-4">
                    <p class="text-dark-2 font-medium">A temporary password has been generated for:</p>
                    <p class="text-brand-600 font-bold mt-2" id="reset-user-name">Selected User</p>
                </div>
                
                <div class="bg-[#f8f3e3] border border-[#e5c867] rounded-lg p-4 mt-4">
                    <div class="flex items-start gap-2">
                        <i data-lucide="info" class="h-5 w-5 text-[#b48e22] flex-shrink-0 mt-0.5"></i>
                        <div>
                            <p class="text-dark-2 font-medium">Temporary Password:</p>
                            <div class="flex items-center mt-2">
                                <div class="relative flex-grow">
                                    <input type="text" id="temp-password" class="w-full pr-10 py-2 px-3 bg-white border border-[#e5c867] rounded-md text-dark-1 font-mono" readonly value="loading..." />
                                    <button type="button" id="copy-password" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-[#b48e22] hover:text-[#9e7b1e]">
                                        <i data-lucide="copy" class="h-5 w-5"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-4">
                    <p class="text-dark-3 text-sm">Important notes:</p>
                    <ul class="mt-2 space-y-2">
                        <li class="flex items-start gap-2 text-dark-3 text-sm">
                            <i data-lucide="check" class="h-4 w-4 text-brand-500 flex-shrink-0 mt-0.5"></i>
                            <span>This password will be sent to the user's email address</span>
                        </li>
                        <li class="flex items-start gap-2 text-dark-3 text-sm">
                            <i data-lucide="check" class="h-4 w-4 text-brand-500 flex-shrink-0 mt-0.5"></i>
                            <span>User will be prompted to change this password on next login</span>
                        </li>
                        <li class="flex items-start gap-2 text-dark-3 text-sm">
                            <i data-lucide="check" class="h-4 w-4 text-brand-500 flex-shrink-0 mt-0.5"></i>
                            <span>Copy this password now if you need to provide it to the user manually</span>
                        </li>
                    </ul>
                </div>
            </div>
            
            <!-- Modal Footer/Actions -->
            <div class="flex justify-end items-center gap-3 mt-6">
                <button type="button" class="py-2.5 px-5 rounded-lg text-dark-2 bg-white border border-brand-200 hover:border-brand-500 transition-all duration-200 font-medium text-sm" id="close-password-modal" aria-label="Close Dialog">
                    Close
                </button>
                <button type="button" id="send-email-btn" class="py-2.5 px-5 rounded-lg bg-gradient-to-r from-[#c9a227] to-[#b48e22] text-white hover:from-[#b48e22] hover:to-[#9e7b1e] transition-all duration-200 font-medium text-sm inline-flex items-center gap-1.5" aria-label="Send Email">
                    <i data-lucide="mail" class="h-4 w-4"></i>
                    Send Email
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal with modern design -->
<div class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50 opacity-0 pointer-events-none transition-opacity duration-300" id="delete-modal" role="dialog" aria-labelledby="modal-title" tabindex="-1">
    <div class="bg-white rounded-xl w-full max-w-md p-0 border border-brand-200 shadow-xl transform translate-y-5 transition-all duration-300 overflow-hidden">
        <!-- Modal Header with Warning -->
        <div class="bg-red-50 p-6 border-b border-red-100">
            <div class="flex items-center gap-4">
                <div class="flex items-center justify-center w-12 h-12 rounded-full bg-red-100 text-red-600">
                    <i data-lucide="alert-triangle" class="h-6 w-6"></i>
                </div>
                <div>
                    <h3 class="text-xl font-bold font-playfair text-red-700" id="modal-title">
                        Delete User Account
                    </h3>
                    <p class="text-sm text-red-600 mt-1">This action cannot be undone</p>
                </div>
            </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-6">
            <div class="mb-6">
                <div class="p-4 bg-light-2 rounded-lg mb-4">
                    <p class="text-dark-2 font-medium">You are about to permanently delete this user account:</p>
                    <p class="text-brand-600 font-bold mt-2" id="delete-user-name">Selected User</p>
                </div>
                <p class="text-dark-3">Deleting this user will:</p>
                <ul class="mt-2 space-y-2">
                    <li class="flex items-start gap-2 text-dark-3">
                        <i data-lucide="check" class="h-5 w-5 text-red-500 flex-shrink-0 mt-0.5"></i>
                        <span>Remove all personal information</span>
                    </li>
                    <li class="flex items-start gap-2 text-dark-3">
                        <i data-lucide="check" class="h-5 w-5 text-red-500 flex-shrink-0 mt-0.5"></i>
                        <span>Delete all user preferences and settings</span>
                    </li>
                    <li class="flex items-start gap-2 text-dark-3">
                        <i data-lucide="check" class="h-5 w-5 text-red-500 flex-shrink-0 mt-0.5"></i>
                        <span>Revoke all access to the application</span>
                    </li>
                </ul>
            </div>
            
            <!-- Modal Footer/Actions -->
            <div class="flex justify-end items-center gap-3 mt-6">
                <button type="button" class="py-2.5 px-5 rounded-lg text-dark-2 bg-white border border-brand-200 hover:border-brand-500 transition-all duration-200 font-medium text-sm" id="cancel-delete" aria-label="Cancel Deletion">
                    Cancel
                </button>
                <form method="post" asp-page-handler="DeleteUser">
                    <input type="hidden" asp-for="SelectedUserId" id="delete-user-id" />
                    <button type="submit" class="py-2.5 px-5 rounded-lg bg-gradient-to-r from-red-500 to-red-700 text-white hover:from-red-600 hover:to-red-800 transition-all duration-200 font-medium text-sm inline-flex items-center gap-1.5" aria-label="Confirm Delete User">
                        <i data-lucide="trash-2" class="h-4 w-4"></i>
                        Confirm Deletion
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- User selection script for delete modal -->
<script>
    function showDeleteModal() {
        const modal = document.getElementById('delete-modal');
        const deleteUserIdInput = document.getElementById('delete-user-id');
        const deleteUserName = document.getElementById('delete-user-name');
        const selectedUserIdInput = document.querySelector('#roleForm [name="SelectedUserId"]');
        
        if (selectedUserIdInput && selectedUserIdInput.value && deleteUserIdInput) {
            const selectedUser = selectedUserIdInput.options[selectedUserIdInput.selectedIndex];
            deleteUserIdInput.value = selectedUserIdInput.value;
            deleteUserName.textContent = selectedUser.text || 'Selected User';
            
            modal.classList.add('opacity-100', 'pointer-events-auto');
            modal.querySelector('div').classList.remove('translate-y-5');
            modal.focus();

            // Trap focus within modal
            const focusable = modal.querySelectorAll('button, input, select');
            const firstFocusable = focusable[0];
            const lastFocusable = focusable[focusable.length - 1];

            const handleKeyDown = function(e) {
                if (e.key === 'Tab') {
                    if (e.shiftKey && document.activeElement === firstFocusable) {
                        e.preventDefault();
                        lastFocusable.focus();
                    } else if (!e.shiftKey && document.activeElement === lastFocusable) {
                        e.preventDefault();
                        firstFocusable.focus();
                    }
                }
                if (e.key === 'Escape') {
                    closeModal();
                }
            };

            modal.addEventListener('keydown', handleKeyDown);
        } else {
            alert('Please select a user first');
        }
    }
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function closeModal() {
            const modal = document.getElementById('delete-modal');
            modal.classList.remove('opacity-100', 'pointer-events-auto');
            modal.querySelector('div').classList.add('translate-y-5');
        }
        
        function closePasswordModal() {
            const modal = document.getElementById('password-reset-modal');
            modal.classList.remove('opacity-100', 'pointer-events-auto');
            modal.querySelector('div').classList.add('translate-y-5');
        }

        function showPasswordResetModal() {
            const selectedUserIdInput = document.querySelector('#roleForm [name="SelectedUserId"]');
            
            if (!selectedUserIdInput || !selectedUserIdInput.value) {
                alert('Please select a user first');
                return;
            }
            
            const selectedUser = selectedUserIdInput.options[selectedUserIdInput.selectedIndex];
            const modal = document.getElementById('password-reset-modal');
            const resetUserName = document.getElementById('reset-user-name');
            const tempPasswordField = document.getElementById('temp-password');
            
            // Set user name
            resetUserName.textContent = selectedUser.text || 'Selected User';
            
            // Show loading state
            tempPasswordField.value = "Generating...";
            modal.classList.add('opacity-100', 'pointer-events-auto');
            modal.querySelector('div').classList.remove('translate-y-5');
            
            // Get CSRF token
            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            
            // Make AJAX call to generate password
            fetch('?handler=ResetPassword', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': csrfToken
                },
                body: JSON.stringify({
                    SelectedUserId: selectedUserIdInput.value
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    tempPasswordField.value = data.tempPassword;
                    
                    // Show success notification
                    const successMessage = document.createElement('div');
                    successMessage.className = 'fixed bottom-4 right-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded shadow-lg z-50 fade-out';
                    successMessage.innerHTML = `
                        <div class="flex items-center">
                            <i data-lucide="check-circle" class="h-5 w-5 mr-2"></i>
                            <p>Password reset successfully!</p>
                        </div>
                    `;
                    document.body.appendChild(successMessage);
                    lucide.createIcons();
                    
                    // Remove after 5 seconds
                    setTimeout(() => {
                        successMessage.remove();
                    }, 5000);
                } else {
                    tempPasswordField.value = "Error occurred";
                    alert('Error: ' + (data.message || 'Failed to reset password'));
                }
            })
            .catch(error => {
                tempPasswordField.value = "Error occurred";
                console.error('Error:', error);
                alert('An error occurred while resetting password');
            });
        }
        
        document.addEventListener("DOMContentLoaded", function () {
            console.log('ManageRoles script loaded');
            lucide.createIcons();
            
            // Setup copy button for temporary password
            const copyPasswordBtn = document.getElementById('copy-password');
            if (copyPasswordBtn) {
                copyPasswordBtn.addEventListener('click', function() {
                    const tempPasswordField = document.getElementById('temp-password');
                    tempPasswordField.select();
                    document.execCommand('copy');
                    
                    // Show copied feedback
                    const originalIcon = this.innerHTML;
                    this.innerHTML = '<i data-lucide="check" class="h-5 w-5"></i>';
                    lucide.createIcons();
                    
                    setTimeout(() => {
                        this.innerHTML = originalIcon;
                        lucide.createIcons();
                    }, 2000);
                });
            }
            
            // Setup close button for password modal
            const closePasswordBtn = document.getElementById('close-password-modal');
            if (closePasswordBtn) {
                closePasswordBtn.addEventListener('click', closePasswordModal);
            }
            
            // Setup send email button
            const sendEmailBtn = document.getElementById('send-email-btn');
            if (sendEmailBtn) {
                sendEmailBtn.addEventListener('click', function() {
                    const selectedUserIdInput = document.querySelector('#roleForm [name="SelectedUserId"]');
                    const tempPassword = document.getElementById('temp-password').value;
                    const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    
                    if (!selectedUserIdInput || !selectedUserIdInput.value || !tempPassword || tempPassword === "Generating..." || tempPassword === "Error occurred") {
                        alert('No valid password to send');
                        return;
                    }
                    
                    // Show loading state
                    const originalText = this.innerHTML;
                    this.innerHTML = '<i data-lucide="loader-circle" class="animate-spin h-4 w-4 mr-1.5"></i> Sending...';
                    this.disabled = true;
                    lucide.createIcons();
                    
                    // Make AJAX call to send email
                    fetch('?handler=SendPasswordEmail', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': csrfToken
                        },
                        body: JSON.stringify({
                            SelectedUserId: selectedUserIdInput.value,
                            TempPassword: tempPassword
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Show success message
                            this.innerHTML = '<i data-lucide="check" class="h-4 w-4 mr-1.5"></i> Sent!';
                            lucide.createIcons();
                            
                            setTimeout(() => {
                                closePasswordModal();
                                
                                // Show notification
                                const successMessage = document.createElement('div');
                                successMessage.className = 'fixed bottom-4 right-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded shadow-lg z-50 fade-out';
                                successMessage.innerHTML = `
                                    <div class="flex items-center">
                                        <i data-lucide="mail-check" class="h-5 w-5 mr-2"></i>
                                        <p>Email sent successfully!</p>
                                    </div>
                                `;
                                document.body.appendChild(successMessage);
                                lucide.createIcons();
                                
                                // Remove after 5 seconds
                                setTimeout(() => {
                                    successMessage.remove();
                                }, 5000);
                            }, 1500);
                        } else {
                            this.innerHTML = originalText;
                            this.disabled = false;
                            lucide.createIcons();
                            alert('Error: ' + (data.message || 'Failed to send email'));
                        }
                    })
                    .catch(error => {
                        this.innerHTML = originalText;
                        this.disabled = false;
                        lucide.createIcons();
                        console.error('Error:', error);
                        alert('An error occurred while sending email');
                    });
                });
            }
            

            // Tab functionality with modern styling
            const tabs = document.querySelectorAll('[data-panel]');
            const panels = document.querySelectorAll('[id^="panel-"]');

            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    // Remove active classes from all tabs
                    tabs.forEach(t => {
                        t.classList.remove('bg-gradient-to-br', 'from-brand-100', 'to-brand-50', 'text-dark-1', 'font-semibold', 'shadow-inner');
                        t.querySelector('.w-12.h-12').classList.remove('bg-gradient-to-br', 'from-[#c9a227]', 'to-[#b48e22]', 'text-white');
                        t.querySelector('.w-12.h-12').classList.add('bg-brand-100', 'text-brand-600');
                        t.querySelector('.absolute').classList.remove('opacity-100');
                        t.querySelector('.absolute').classList.add('opacity-0');
                        t.setAttribute('aria-selected', 'false');
                    });
                    
                    // Add active classes to clicked tab
                    tab.classList.add('bg-gradient-to-br', 'from-brand-100', 'to-brand-50', 'text-dark-1', 'font-semibold', 'shadow-inner');
                    tab.querySelector('.w-12.h-12').classList.remove('bg-brand-100', 'text-brand-600');
                    tab.querySelector('.w-12.h-12').classList.add('bg-gradient-to-br', 'from-[#c9a227]', 'to-[#b48e22]', 'text-white');
                    tab.querySelector('.absolute').classList.remove('opacity-0');
                    tab.querySelector('.absolute').classList.add('opacity-100');
                    tab.setAttribute('aria-selected', 'true');

                    // Show corresponding panel with animation
                    const panelId = tab.getAttribute('data-panel');
                    panels.forEach(panel => {
                        if (panel.id === panelId) {
                            panel.style.display = 'block';
                            setTimeout(() => {
                                panel.style.opacity = '1';
                            }, 10); // Small delay to ensure display:block takes effect before animation
                        } else {
                            panel.style.opacity = '0';
                            setTimeout(() => {
                                panel.style.display = 'none';
                            }, 300); // Match the duration of the fade-out animation
                        }
                    });
                });
            });

            // Initialize active tab (show first tab by default if none active)
            let activeTab = document.querySelector('[aria-selected="true"]');
            if (!activeTab) {
                activeTab = document.querySelector('[data-panel]');
                if (activeTab) {
                    activeTab.classList.add('bg-gradient-to-br', 'from-brand-100', 'to-brand-50', 'text-dark-1', 'font-semibold', 'shadow-inner');
                    activeTab.querySelector('.w-12.h-12').classList.remove('bg-brand-100', 'text-brand-600');
                    activeTab.querySelector('.w-12.h-12').classList.add('bg-gradient-to-br', 'from-[#c9a227]', 'to-[#b48e22]', 'text-white');
                    activeTab.querySelector('.absolute').classList.remove('opacity-0');
                    activeTab.querySelector('.absolute').classList.add('opacity-100');
                    activeTab.setAttribute('aria-selected', 'true');
                }
            }
            
            if (activeTab) {
                const panelId = activeTab.getAttribute('data-panel');
                panels.forEach(panel => {
                    panel.style.display = panel.id === panelId ? 'block' : 'none';
                    if (panel.id === panelId) {
                        panel.style.opacity = '1';
                    }
                });
            }

            // Test connection button
            const testButton = document.getElementById('test-connection');
            if (testButton) {
                testButton.addEventListener('click', async function () {
                    const resultPanel = document.getElementById('connection-result');
                    const resultContent = document.getElementById('test-result-content');
                    const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                    if (!csrfToken) {
                        resultPanel.style.display = 'block';
                        resultContent.innerHTML = `
                            <div class="flex items-center gap-2 text-error">
                                <i data-lucide="alert-circle" class="h-5 w-5"></i>
                                <span class="font-medium">CSRF token missing</span>
                            </div>
                        `;
                        lucide.createIcons();
                        return;
                    }

                    const originalHTML = this.innerHTML;
                    this.innerHTML = `<i data-lucide="loader-circle" class="animate-spin h-4 w-4 mr-2"></i> Testing...`;
                    this.disabled = true;
                    lucide.createIcons();

                    try {
                        const response = await fetch('?handler=TestOllamaConnection', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': csrfToken
                            }
                        });

                        const data = await response.json();
                        resultPanel.style.display = 'block';
                        if (data.success) {
                            resultContent.innerHTML = `
                                <div class="flex items-center gap-2 text-success mb-2">
                                    <i data-lucide="check-circle" class="h-5 w-5"></i>
                                    <span class="font-medium">Connection successful!</span>
                                </div>
                                <div class="mt-3 p-4 bg-light-2 rounded-lg border border-brand-100 overflow-auto">
                                    <pre class="text-sm text-dark-2">${JSON.stringify(data.response, null, 2)}</pre>
                                </div>
                            `;
                        } else {
                            resultContent.innerHTML = `
                                <div class="flex items-center gap-2 text-error mb-2">
                                    <i data-lucide="alert-circle" class="h-5 w-5"></i>
                                    <span class="font-medium">Connection failed</span>
                                </div>
                                <p class="text-dark-3 mb-2">${data.message || 'Unknown error'}</p>
                                ${data.details ? `
                                <details class="mt-3">
                                    <summary class="cursor-pointer text-brand-600 text-sm font-medium flex items-center">
                                        <i data-lucide="chevron-right" class="h-4 w-4 mr-1 transition-transform"></i>
                                        View technical details
                                    </summary>
                                    <div class="mt-2 p-4 bg-light-2 rounded-lg border border-brand-100 overflow-auto">
                                        <pre class="text-sm text-dark-3">${data.details}</pre>
                                    </div>
                                </details>` : ''}
                            `;
                        }
                    } catch (error) {
                        resultPanel.style.display = 'block';
                        resultContent.innerHTML = `
                            <div class="flex items-center gap-2 text-error mb-2">
                                <i data-lucide="alert-circle" class="h-5 w-5"></i>
                                <span class="font-medium">Connection failed</span>
                            </div>
                            <p class="text-dark-3">${error.message || 'Network error'}</p>
                        `;
                    } finally {
                        this.innerHTML = originalHTML;
                        this.disabled = false;
                        lucide.createIcons();
                        
                        // Add click event for details summary to rotate chevron
                        const detailsSummary = resultContent.querySelector('summary');
                        if (detailsSummary) {
                            detailsSummary.addEventListener('click', function() {
                                const chevron = this.querySelector('i');
                                if (this.parentElement.hasAttribute('open')) {
                                    chevron.style.transform = '';
                                } else {
                                    chevron.style.transform = 'rotate(90deg)';
                                }
                            });
                        }
                    }
                });
            }

            // Modal functionality
            const modal = document.getElementById('delete-modal');
            const cancelButton = document.getElementById('cancel-delete');

            if (cancelButton) {
                cancelButton.addEventListener('click', () => {
                    closeModal();
                });
            }

            // Enhanced form validation feedback
            document.querySelectorAll('#roleForm select').forEach(select => {
                select.addEventListener('change', function() {
                    if (this.value) {
                        this.classList.add('border-brand-500', 'bg-brand-50', 'bg-opacity-50');
                        this.classList.remove('border-error');
                    } else {
                        this.classList.remove('border-brand-500', 'bg-brand-50', 'bg-opacity-50');
                    }
                });
            });

            // Apply animations with staggered timing for sections
            const animateElements = document.querySelectorAll('.animate-slide-up');
            animateElements.forEach((el, index) => {
                setTimeout(() => {
                    el.style.opacity = '1';
                }, 100 * index);
            });

            // Status messages fade in immediately
            document.querySelectorAll('.animate-fade-in').forEach(el => {
                el.style.opacity = '1';
            });
            
            // Initialize Lucide icons
            lucide.createIcons();
        });
    </script>
}